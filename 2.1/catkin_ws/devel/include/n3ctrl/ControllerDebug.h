// Generated by gencpp from file n3ctrl/ControllerDebug.msg
// DO NOT EDIT!


#ifndef N3CTRL_MESSAGE_CONTROLLERDEBUG_H
#define N3CTRL_MESSAGE_CONTROLLERDEBUG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace n3ctrl
{
template <class ContainerAllocator>
struct ControllerDebug_
{
  typedef ControllerDebug_<ContainerAllocator> Type;

  ControllerDebug_()
    : header()
    , des_p()
    , u_p_p()
    , u_p_i()
    , u_p()
    , des_v()
    , u_v_p()
    , u_v_i()
    , u_v()
    , k_p_p()
    , k_p_i()
    , k_v_p()
    , k_v_i()  {
    }
  ControllerDebug_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , des_p(_alloc)
    , u_p_p(_alloc)
    , u_p_i(_alloc)
    , u_p(_alloc)
    , des_v(_alloc)
    , u_v_p(_alloc)
    , u_v_i(_alloc)
    , u_v(_alloc)
    , k_p_p(_alloc)
    , k_p_i(_alloc)
    , k_v_p(_alloc)
    , k_v_i(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _des_p_type;
  _des_p_type des_p;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _u_p_p_type;
  _u_p_p_type u_p_p;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _u_p_i_type;
  _u_p_i_type u_p_i;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _u_p_type;
  _u_p_type u_p;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _des_v_type;
  _des_v_type des_v;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _u_v_p_type;
  _u_v_p_type u_v_p;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _u_v_i_type;
  _u_v_i_type u_v_i;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _u_v_type;
  _u_v_type u_v;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _k_p_p_type;
  _k_p_p_type k_p_p;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _k_p_i_type;
  _k_p_i_type k_p_i;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _k_v_p_type;
  _k_v_p_type k_v_p;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _k_v_i_type;
  _k_v_i_type k_v_i;





  typedef boost::shared_ptr< ::n3ctrl::ControllerDebug_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::n3ctrl::ControllerDebug_<ContainerAllocator> const> ConstPtr;

}; // struct ControllerDebug_

typedef ::n3ctrl::ControllerDebug_<std::allocator<void> > ControllerDebug;

typedef boost::shared_ptr< ::n3ctrl::ControllerDebug > ControllerDebugPtr;
typedef boost::shared_ptr< ::n3ctrl::ControllerDebug const> ControllerDebugConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::n3ctrl::ControllerDebug_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::n3ctrl::ControllerDebug_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::n3ctrl::ControllerDebug_<ContainerAllocator1> & lhs, const ::n3ctrl::ControllerDebug_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.des_p == rhs.des_p &&
    lhs.u_p_p == rhs.u_p_p &&
    lhs.u_p_i == rhs.u_p_i &&
    lhs.u_p == rhs.u_p &&
    lhs.des_v == rhs.des_v &&
    lhs.u_v_p == rhs.u_v_p &&
    lhs.u_v_i == rhs.u_v_i &&
    lhs.u_v == rhs.u_v &&
    lhs.k_p_p == rhs.k_p_p &&
    lhs.k_p_i == rhs.k_p_i &&
    lhs.k_v_p == rhs.k_v_p &&
    lhs.k_v_i == rhs.k_v_i;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::n3ctrl::ControllerDebug_<ContainerAllocator1> & lhs, const ::n3ctrl::ControllerDebug_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace n3ctrl

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::n3ctrl::ControllerDebug_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::n3ctrl::ControllerDebug_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::n3ctrl::ControllerDebug_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::n3ctrl::ControllerDebug_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::n3ctrl::ControllerDebug_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::n3ctrl::ControllerDebug_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::n3ctrl::ControllerDebug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2879e490b09bd2d41232bc7fbaf6a3c1";
  }

  static const char* value(const ::n3ctrl::ControllerDebug_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2879e490b09bd2d4ULL;
  static const uint64_t static_value2 = 0x1232bc7fbaf6a3c1ULL;
};

template<class ContainerAllocator>
struct DataType< ::n3ctrl::ControllerDebug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "n3ctrl/ControllerDebug";
  }

  static const char* value(const ::n3ctrl::ControllerDebug_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::n3ctrl::ControllerDebug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"geometry_msgs/Vector3 des_p\n"
"geometry_msgs/Vector3 u_p_p\n"
"geometry_msgs/Vector3 u_p_i\n"
"geometry_msgs/Vector3 u_p\n"
"geometry_msgs/Vector3 des_v\n"
"geometry_msgs/Vector3 u_v_p\n"
"geometry_msgs/Vector3 u_v_i\n"
"geometry_msgs/Vector3 u_v\n"
"geometry_msgs/Vector3 k_p_p\n"
"geometry_msgs/Vector3 k_p_i\n"
"geometry_msgs/Vector3 k_v_p\n"
"geometry_msgs/Vector3 k_v_i\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::n3ctrl::ControllerDebug_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::n3ctrl::ControllerDebug_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.des_p);
      stream.next(m.u_p_p);
      stream.next(m.u_p_i);
      stream.next(m.u_p);
      stream.next(m.des_v);
      stream.next(m.u_v_p);
      stream.next(m.u_v_i);
      stream.next(m.u_v);
      stream.next(m.k_p_p);
      stream.next(m.k_p_i);
      stream.next(m.k_v_p);
      stream.next(m.k_v_i);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ControllerDebug_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::n3ctrl::ControllerDebug_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::n3ctrl::ControllerDebug_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "des_p: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.des_p);
    s << indent << "u_p_p: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.u_p_p);
    s << indent << "u_p_i: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.u_p_i);
    s << indent << "u_p: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.u_p);
    s << indent << "des_v: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.des_v);
    s << indent << "u_v_p: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.u_v_p);
    s << indent << "u_v_i: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.u_v_i);
    s << indent << "u_v: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.u_v);
    s << indent << "k_p_p: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.k_p_p);
    s << indent << "k_p_i: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.k_p_i);
    s << indent << "k_v_p: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.k_v_p);
    s << indent << "k_v_i: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.k_v_i);
  }
};

} // namespace message_operations
} // namespace ros

#endif // N3CTRL_MESSAGE_CONTROLLERDEBUG_H
